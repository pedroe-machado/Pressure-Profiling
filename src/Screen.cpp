#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <thread>

// Pin definitions
#define LCD_CLK 18
#define LCD_DIN 23
#define LCD_DC 4
#define LCD_RST 2
#define LCD_CS 15
#define POT_PIN 12
#define SWITCH_PIN 13

// Bitmaps
// '75cddb54e4734312b14512895a178f43u5UrFwfIni6JoKw4-0', 84x48px
const int coffeeOpen_Width = 84;
const int coffeeOpen_Height = 48;
const unsigned char coffeeOpen_Bitmap [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x38, 0x3f, 0xff, 
	0xff, 0xfe, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x70, 
	0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x3f, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x01, 0xff, 0xff, 0xc0, 0x0e, 0x0e, 
	0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 
	0xc1, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0e, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x07, 0xc0, 0x07, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x07, 0xc0, 0x07, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 
	0x01, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xff, 
	0xff, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 
	0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '75cddb54e4734312b14512895a178f43u5UrFwfIni6JoKw4-1', 84x48px
const int coffeeBlink_Width = 84;  
const int coffeeBlink_Height = 48;
const unsigned char coffeeBlink_Bitmap[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x38, 0x3f, 0xff, 
	0xff, 0xfe, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x70, 
	0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x3f, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x01, 0xff, 0xff, 0xc0, 0x0e, 0x0e, 
	0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0xc1, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0e, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 
	0x01, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xff, 
	0xff, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 
	0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// LCD object
Adafruit_PCD8544 lcd = Adafruit_PCD8544(LCD_CLK, LCD_DIN, LCD_DC, LCD_CS, LCD_RST);

// Global variables
bool run = false;
bool endExtraction = false;
int x_index = 0;
const int my_height = 48;
const int my_width = 84;
const int headerSpace = 10;

// Declare functions
void updateLCD();
void printHeader(int lcdHeight);
void homeScreen();

void welcome(){
    lcd.clearDisplay();
    lcd.setCursor(1, 0);
    lcd.setTextSize(1);
    lcd.printf("Welcome!\nCafezudo");
    lcd.display();
    delay(5000);
}

void homeScreen(){
    
    lcd.clearDisplay();
    lcd.drawBitmap(0, 0, coffeeOpen_Bitmap, coffeeOpen_Width, coffeeOpen_Height, BLACK);
    lcd.display();
    delay(3000);
    lcd.clearDisplay();
    lcd.drawBitmap(0, 0, coffeeBlink_Bitmap, coffeeBlink_Width, coffeeBlink_Height, BLACK);
    lcd.display();
    delay(800);
}

void updateLCD() {
    x_index = 0;
    lcd.clearDisplay();
    while (endExtraction==false && run==true) {
        
        // Read potentiometer value
        int potValue = analogRead(POT_PIN);

        // Map potentiometer value to LCD height
        int lcdHeight = map(potValue, 0, 4095, 0, 32);

        // Print header 
        printHeader(lcdHeight);

        if (x_index < my_width) lcd.drawFastVLine(x_index, my_height-2, -lcdHeight, BLACK);
        else endExtraction = true;

        // Display graph
        lcd.display();

        // Delay for smooth update
        delay(200);
        x_index++;
    }
    delay(5000);
}
void printHeader(int lcdHeight) {
    lcd.setCursor(1, 0);
    lcd.setTextSize(0);
    lcd.printf("Bar:");
    lcd.printf("%d", lcdHeight/2);
    lcd.printf("|Tmp:");
    lcd.printf("%d", lcdHeight/4);
    lcd.drawFastHLine(0, headerSpace, lcd.width(), BLACK);
}

void setup() {
    // Initialize LCD
    Serial.begin(9600);
    lcd.begin();
    lcd.setContrast(50);
    lcd.clearDisplay();
    lcd.display();

    // Welcome Screen
    std::thread homeThread(welcome);
    homeThread.join();
}

void loop() {
    run = digitalRead(SWITCH_PIN);
    if (run == true && endExtraction == false) {
        std::thread lcdThread(updateLCD);
        lcdThread.join();
    } else if(run == true && endExtraction == true) {
        lcd.clearDisplay();
        lcd.setCursor(1, 0);
        lcd.setTextSize(2);
        lcd.printf("Turn \nme OFF!");
        lcd.display();
    } else if(run == false && endExtraction == true) {
        endExtraction = false;
    } else {
        homeScreen();
    }
    delay(100);
}


