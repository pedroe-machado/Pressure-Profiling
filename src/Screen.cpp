#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <thread>

// Pin definitions
#define LCD_CLK 18
#define LCD_DIN 23
#define LCD_DC 4
#define LCD_RST 2
#define LCD_CS 15
#define POT_PIN 12
#define SWITCH_PIN 13

// Bitmaps
const unsigned char the_paje[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x10, 0x24, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 
	0xf0, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbe, 0x38, 0x00, 0x00, 0x00, 0x24, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc8, 0x00, 0x00, 0x00, 0x6c, 0x06, 0x00, 0x00, 0x00, 0x78, 
	0x06, 0x6c, 0x00, 0x00, 0x00, 0x6c, 0x0c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x3e, 0x00, 0x00, 0x00, 
	0x6d, 0x98, 0x80, 0x00, 0x00, 0x3f, 0x3f, 0x8f, 0xf8, 0x00, 0x00, 0x6d, 0x99, 0x00, 0x00, 0x01, 
	0xf8, 0xff, 0xff, 0xee, 0x00, 0x00, 0x6a, 0xa6, 0x00, 0x00, 0x07, 0xe3, 0xe0, 0x1f, 0xcf, 0x00, 
	0x00, 0x6e, 0x40, 0x00, 0x00, 0x01, 0x8f, 0x00, 0x3f, 0x9d, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 
	0x01, 0xfc, 0x1c, 0xfb, 0x38, 0x80, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xc0, 0xfe, 0x70, 
	0xc0, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x0f, 0xfe, 0xe3, 0xc0, 0x00, 0x3e, 0x00, 0x00, 
	0x00, 0x0f, 0x8c, 0x37, 0xff, 0xe3, 0x20, 0x00, 0x61, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0xcf, 0xff, 
	0xe1, 0x10, 0x30, 0xc1, 0x00, 0x00, 0x00, 0x07, 0xf3, 0x1e, 0x7f, 0xe3, 0x10, 0x30, 0x81, 0x80, 
	0x00, 0x00, 0x03, 0xc6, 0x78, 0xff, 0xc2, 0x30, 0x59, 0x01, 0x80, 0x00, 0x00, 0x07, 0x8c, 0xf3, 
	0xbb, 0x8c, 0x20, 0x59, 0x01, 0x80, 0x00, 0x00, 0x0f, 0x0d, 0xe7, 0x3b, 0x8c, 0x20, 0x5a, 0x01, 
	0x80, 0x40, 0x80, 0x1e, 0x1d, 0xcf, 0x3f, 0xc0, 0x30, 0x5a, 0x01, 0x00, 0x00, 0x80, 0x37, 0xf9, 
	0x8e, 0x39, 0xc0, 0x10, 0x1a, 0x01, 0x00, 0x01, 0x00, 0x07, 0xf1, 0x16, 0x39, 0xa0, 0x10, 0x5c, 
	0x01, 0x18, 0x01, 0x00, 0x07, 0xe2, 0x2c, 0x39, 0x90, 0x10, 0x5c, 0x03, 0x38, 0xc3, 0x00, 0x0f, 
	0xce, 0x4c, 0x39, 0x9f, 0xe0, 0x5c, 0x02, 0x38, 0x46, 0x00, 0x0f, 0x9c, 0x58, 0x79, 0xcc, 0x00, 
	0x18, 0x04, 0x79, 0xcc, 0x40, 0x1d, 0xf8, 0x98, 0x79, 0xc8, 0x00, 0x18, 0x0c, 0x6e, 0x73, 0x80, 
	0x00, 0xf8, 0x98, 0xfb, 0x40, 0x00, 0x18, 0x08, 0x00, 0x60, 0x00, 0x00, 0xf1, 0x99, 0xfb, 0xf8, 
	0x00, 0x18, 0x30, 0x00, 0xc0, 0x00, 0x01, 0xf3, 0x11, 0xfb, 0xfc, 0x00, 0x18, 0x60, 0x01, 0xc0, 
	0x00, 0x03, 0xe7, 0x33, 0xfb, 0xdc, 0x00, 0x3f, 0x80, 0x02, 0x40, 0x00, 0x00, 0x3e, 0x73, 0xff, 
	0xfc, 0x00, 0x1e, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0xf7, 0x86, 0x00, 0x00, 0x10, 0x00, 0x04, 
	0x40, 0x00, 0x00, 0x3d, 0xff, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x3f, 0xff, 
	0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0xc0, 0x00, 0x00, 0x3f, 0xe6, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x08, 0x80, 0x00, 0x00, 0x0f, 0xc6, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x80, 0x00, 0x00, 0x03, 
	0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char coffeeOpen_Bitmap [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x38, 0x3f, 0xff, 
	0xff, 0xfe, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x70, 
	0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x3f, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x01, 0xff, 0xff, 0xc0, 0x0e, 0x0e, 
	0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 
	0xc1, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0e, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x07, 0xc0, 0x07, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x07, 0xc0, 0x07, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 
	0x01, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xff, 
	0xff, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 
	0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char coffeeBlink_Bitmap[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x38, 0x3f, 0xff, 
	0xff, 0xfe, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x70, 
	0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x3f, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x38, 0x01, 0xff, 0xff, 0xc0, 0x0e, 0x0e, 
	0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0xc1, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x38, 0x07, 0xc0, 0x07, 0xc0, 0x0e, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 
	0x01, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfe, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0xff, 
	0xff, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 
	0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// LCD object
Adafruit_PCD8544 lcd = Adafruit_PCD8544(LCD_CLK, LCD_DIN, LCD_DC, LCD_CS, LCD_RST);

// Global variables
bool run = false;
bool endExtraction = false;
int x_index = 0;
const int my_height = 48;
const int my_width = 84;
const int headerSpace = 10;

// Declare functions
void updateLCD();
void printHeader(int lcdHeight, int volume);
void homeScreen();
void welcome();
void blink();
void openEyes();

// implement functions
void welcome(){
    lcd.clearDisplay();
    lcd.drawBitmap(0, 0, the_paje, my_width, my_height, BLACK);
    lcd.display();
    delay(3000);
}
void blink(){
    lcd.clearDisplay();
    lcd.drawBitmap(0, 0, coffeeBlink_Bitmap, my_width, my_height, BLACK);
    lcd.display();
}
void openEyes(){
    lcd.clearDisplay();
    lcd.drawBitmap(0, 0, coffeeOpen_Bitmap, my_width, my_height, BLACK);
    lcd.display();
}
void homeScreen(){
    openEyes();
    delay(3000);
    blink();
    delay(500);
}

void updateLCD() {
    x_index = 0;
    lcd.clearDisplay();
    int volume = 0;
    while (endExtraction == false && run == true){
        run = digitalRead(SWITCH_PIN);

        // Read potentiometer value
        int potValue = analogRead(POT_PIN);

        // Map potentiometer value to graph height
        int lcdHeight = map(potValue, 0, 4095, 0, 32);
        volume++;

        // Print header 
        printHeader(lcdHeight,volume);

        if (x_index < my_width) lcd.drawFastVLine(x_index, my_height-2, -lcdHeight, BLACK);
        else endExtraction = true;

        // Display graph
        lcd.display();

        // Delay for smooth update
        delay(200);
        x_index++;
    }
    delay(2000);
}
void printHeader(int lcdHeight, int volume) {
    lcd.fillRect(0, 0, lcd.width(), headerSpace, WHITE);
    lcd.setCursor(1, 0);
    lcd.setTextSize(0);
    lcd.printf("Bar:");
    lcd.printf("%d", lcdHeight/2);
    lcd.printf("|ml:");
    lcd.printf("%d", volume);
    lcd.drawFastHLine(0, headerSpace, lcd.width(), BLACK);
}

void setup() {
    // Initialize LCD
    Serial.begin(9600);
    lcd.begin();
    lcd.setContrast(56);
    lcd.clearDisplay();
    lcd.display();

    // Welcome Screen
    std::thread homeThread(welcome);
    homeThread.join();
}

void loop() {
    run = digitalRead(SWITCH_PIN);
    if (run == true && endExtraction == false) {
        std::thread lcdThread(updateLCD);
        lcdThread.join();
    } else if(run == true && endExtraction == true) {
        lcd.clearDisplay();
        lcd.setCursor(1, 0);
        lcd.setTextSize(2);
        lcd.printf("Turn \nme OFF!");
        lcd.display();
    } else if(run == false && endExtraction == true) {
        endExtraction = false;
    } else {
        homeScreen();
    }
    delay(100);
}


